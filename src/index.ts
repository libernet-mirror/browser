import fs from "node:fs/promises";
import path from "node:path";

import { app, BrowserWindow, ipcMain } from "electron";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      contextIsolation: true,
      devTools: false,
      nodeIntegration: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  mainWindow.setMenu(null);
  mainWindow.webContents.openDevTools();
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

// This method will be called when Electron has finished initialization and is ready to create
// browser windows. Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common for applications and their
// menu bar to stay active until the user quits explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the dock icon is clicked and there
  // are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process code. You can also put
// them in separate files and import them here.

import { Mutex } from "./mutex";
import { Wallet, WalletData } from "./wallet";

function getWalletPath(): string {
  return path.join(app.getPath("userData"), "wallet.json");
}

const walletFileMutex = new Mutex();

ipcMain.handle("wallet/get-status", async () => {
  if (Wallet.isLoaded()) {
    return "loaded";
  }
  try {
    await fs.stat(getWalletPath());
    return "stored";
  } catch {
    return "none";
  }
});

ipcMain.handle("wallet/create", async (_, passwords: string[]) => {
  const wallet = await Wallet.create(passwords);
  const data: WalletData = {
    version: "1.0",
    num_kdf_rounds: Wallet.NUM_KDF_ROUNDS,
    salt: wallet.salt,
    seed: wallet.seed,
    c: wallet.commitment,
    y: wallet.proofs,
  };
  const path = getWalletPath();
  const text = JSON.stringify(data, null, 2);
  await walletFileMutex.locked(async () => {
    await fs.writeFile(path, text);
  });
  console.log(`${path} written`);
});

ipcMain.handle("wallet/load", async (_, password: string) => {
  const path = getWalletPath();
  console.log(`reading ${path}`);
  const data = (await walletFileMutex.locked(() => fs.readFile(path))).toString(
    "utf-8",
  );
  const wallet = await Wallet.load_v1_0(
    JSON.parse(data) as WalletData,
    password,
  );
  await wallet.getAccountByNumber(0);
  return true;
});

ipcMain.handle("wallet/get-account-by-number", async (_, index: number) => {
  return (await Wallet.get().getAccountByNumber(index)).address();
});
